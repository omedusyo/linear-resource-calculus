#V2
cart +(1, 2)
lin %x
cart $x
lin 123
cart #foo()
lin let { a = 123 . %a }
lin let { a = 123 . +[%a, 1] }
cart let { a = 123 . +($a, 1) }
fn cart id(x) { $x }
cart id(123)
fn lin id()[a] { %a }
cart pyth(3, 4)
lin dup[3]
cart let { x = thunk { +[123, 5] } . ($x, $x) }
lin let { x = 123 . %x }
lin let-cart { x = 123 . $x }
lin id()[5]
lin pyth(3,4)[]
cart let { x = 123 . read x }
cart let { (x, y) = (123, 512) . read x }
cart let { (x, y) = (123, 512) . read y }
cart let { (x, y) = (123, 512) . ($y, $x, $x) }
cart let { (x, y) = (123, 512) . $y }
cart let { (x, y) = (123, 512) . ($y) }
cart let { (x, y) = (123, 512) . $y }
lin let { [x, y] = [123, 512] . [$y, $x] }
lin let { [x, y] = [123, 512] . [%y, %x] }
lin let { [x, [y, z]] = [123, [512, 32]] . [%y, %x] }
lin let { [x, [y, z]] = [123, [512, 32]] . [%y, %x, %z] }
lin [123, [512, 32]]
lin let { [x, [y, z]] = [123, [512, 32]] . [%y, %x, %z] }
lin let { [[[x]], [y, z]] = [[[123]], [512, 32]] . [%y, %x, %z] }
lin let { [[[x]], [y, z]] = [[[123]], [512, 32]] . [%y, %x, %z, %z] }
lin let { [[[x]], [y, z]] = [[[123]], [512, 32]] . [%y, %x, clone z, %z] }
lin let { [[[x]], [y, z]] = [[[123]], [512, 32]] . [%y, %x, %z] }
cart let { a = 123 . +($a, 1) }
lin let { a = 123 . +[%a, 1] }
cart let { x = thunk { 123 } . $x }
lin pyth(3,4)[]
