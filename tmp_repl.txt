
cargo build

cargo run

let { foo = 123 . $foo }

obj { x . $x }

send(obj { x . $x }, 123)

:def fn f(x) { $x }

f(123)


#cons 

#nil

#cons(123, #nil)

#pair(#foo(#nil), #pair())

:def fn square(x) { *($x, $x) }

square(3)

:def fn pyth(x, y) { +(square($x), square($y)) }

pyth(3, 4)

:list fn

$bar

==(2, +(1, 1))

let { x = 6 . match ==(2, +(1, 1)) { #T() . $x | #F() . *(3, $x) } }

:def fn foo(x) { 1 }

*(3, 4)

let { inc = fn { x . +($x, 1) } . send($inc, 5) }

(1, 2, 3)

#nil ()

#cons(20, #cons(30, #nil()))

(123)

((123))

#true()

(30, 50)

#nil ()

:def fn fct(x) { match ==($x, 0) { #T() . 1 | #F() . *($x, fct(sub($x, 1))) } }

fct(5)

()

#cons(1, 2)

#cons 123 ()


match #foo (3, 4) { #bar () . 123 | #foo (x, y) . $x }

match #foo #bar () { #foo #bar x . $x | #foo #yeesh y . $y }

match #foo #yeesh 512 { #foo #bar x . $x | #foo #yeesh y . $y }

match #foo #yeesh 512 { #foo #yeesh y . $y | #foo #bar x . $x }


:def fn map(f, xs) { match $xs { #nil() . #nil() | #cons(x, xs) . #cons(send($f, $x), map($f, $xs)) } }

#cons(20, #cons(10, #nil()))

map(obj { x . *($x, $x) }, #cons(10, #nil()))

:def fn range-iter(n, i) { match ==($n, $i) { #T() . #nil() | #F() . #cons($i, range-iter($n, +($i, 1))) } }

range-iter(5, 0)

map(obj { x . *($x, $x) }, range-iter(5, 0))

range-iter(5, 0)


obj { #force () . 123 }

send(obj { #force () . 123 }, #force ())

:def fn nats(n) { obj { #hd () . $n | #tl () . nats(+($n, 1)) } }

send(send(send(nats(0), #tl ()), #tl ()), #hd ())

// This is syntax that doesn't really exist at the moment.
// nats(0) @ #tl() @ #tl() @ #tl() @ #hd()

nats(0)

// What is the type of nats(0)?

// Fascinating. This has "functions" built in.

type NatStream = &{ #hd Unit . i32 | #tl Unit . NatStream }

// i.e.

type NatStream = &{ #hd () . i32 | #tl () . NatStream }

// lazy pair

obj { #fst () . 23 | #snd () . 512 }

send(obj { #fst () . 23 | #snd () . 512 }, #snd ())

type Arrow(A, B) = &{ #send A . B }

obj { #send x . body }


// cartesian vs linear identifiers
fn f(x, y, z)[u, v] {
}


// parsing objects

type Option(A) = +{ #some A | #none () }

type Parser(Token, A, E) = &{
| #next Token . +{ #err E | #continue Parser(Token, A, E) }
| #force Unit . +{ #err E | #ok A }
}

given p : Parser(Token, A, E)
we can give it a token, and it can parse it somehow, then return a new parser object that awaits for next token...
After a while we can force the parser to give us the output, which is like giving it an EOF

cargo build

cargo run

cargo run repl cartesian

:load program.pmd

:list fn

:r

square(5)

range-iter(5, 0)

:def fn f(x) { $x }



cargo run repl linear

:load program2.pmd.linear

:r

[+[5, 6], 2]

:def fn mul_5[x] { *[%x, 5] }

mul_5[6]

:list fn

:r

square[5]

send[example_tuple_0[], #fst[]]

example_tuple_0[]

#fst[]

example_tuple_1[]

range-iter[5, 0]

:def fn f[x] { %x }


obj {. #foo[] . 123 }

:r

send[incrementing_server[], #apply[5]]

map_server()

==[5, 0]

incrementing-server[]

range-iter[5, 0]

map-server[incrementing-server[], range-iter[5, 0]]

:r

fib[5]


dup_nat[5]

// I need a builtin dup  that will clone inductive stuff, but will fail on objects

dup[#cons[5, #nil[]]]


send[fib[3, 5], #next[]]

# ====Combined====

cargo build

