
cargo build

cargo run

let { foo = 123 . $foo }

:def fn f(x) { $x }

f(123)

:def fn square(x) { *($x, $x) }

square(3)

:def fn pyth(x, y) { +(square($x), square($y)) }

pyth(3, 4)

:list fn

$bar

let { x = 6 . if ==(2, +(1, 1)) { 12 } { *(3, $x) } }

:def fn foo(x) { 1 }

*(3, 4)

let { inc = fn { x . +($x, 1) } . app($inc, 5) }

// cartesian vs linear identifiers
fn f(x, y, z)[u, v] {
}

// I need to introduce function declarations
fn f(x, y, z) {
  let {
    square = fn { x . *($x, $x) } .
    +(app($square, $x), app($square, $y))
  }
}
