#V2
send(obj { #fst () . 23 | #snd () . 512 }, #fst ())
send(obj { #fst () . 23 | #snd () . 512 }, #snd ())
let { foo = 123 . $foo }
obj { x . $x }
obj { #force () . 123 }
square(5)
fct(5)
square(5)
range-iter(5)
range-iter(5, 0)
:def fn f(x) { $x }
square(5)
range-iter(5, 0)
map(obj { x . *($x, $x) }, range-iter(5, 0))
square(5)
range-iter(5, 0)
nats(0)
obj { #fst () . 60 | #snd () . 150 }
nats(0)
send(send(send(nats(0), #tl ()), #tl ()), #hd ())
send(obj { #fst () . 60 | #snd () . 150 }, #fst())
send(obj { #fst () . 60 | #snd () . 150 }, #snd())
nats(0)
send(nats(0), #hd())
send(nats(0), #tl())
send(send(nats(0), #tl()), #hd())
nats(0)
square(5)
range-iter(5, 0)
square(5)
range-iter(5, 0)
:def fn f(x) { $x }
f(123)
let { x = 123 . +($x, 1) }
+(20, 30)
+(3, 4)
fn f(x) { $x }
f(213)
pyth(3, 4)
range-iter(5, 0)
fn f(x) { $x }
square(5)
range-iter(5, 0)
123
let { foo = 123 . $foo }
let { foo = 123 . read foo }
let { foo = 123 . $foo }
let { foo = 123 . read foo }
obj { x . $x }
send(obj { x . $x }, 123)
fn f(x) { $x }
f(123)
#cons()
#nil()
#cons(123, #nil())
#pair(#foo(#nil()), #pair())
fn square(x) { *($x, $x) }
square(3)
fn pyth(x, y) { +(square($x), square($y)) }
pyth(3, 4)
$bar
==(2, +(1, 1))
let { x = 6 . match ==(2, +(1, 1)) { #T() . $x | #F() . *(3, $x) } }
fn foo(x) { 1 }
*(3, 4)
let { inc = obj { x . +($x, 1) } . send($inc, 5) }
(1, 2, 3)
#nil ()
#cons(20, #cons(30, #nil()))
(123)
((123))
#true()
(30, 50)
#nil ()
fn fct(x) { match ==($x, 0) { #T() . 1 | #F() . *($x, fct(sub($x, 1))) } }
fct(5)
()
#cons(1, 2)
#cons(123, ())
match #foo (3, 4) { #bar () . 123 | #foo (x, y) . $x }
match #foo #bar () { #foo #bar x . $x | #foo #yeesh y . $y }
match #foo #yeesh 512 { #foo #bar x . $x | #foo #yeesh y . $y }
match #foo #yeesh 512 { #foo #yeesh y . $y | #foo #bar x . $x }
fn map(f, xs) { match $xs { #nil() . #nil() | #cons(x, xs) . #cons(send($f, $x), map($f, $xs)) } }
#cons(20, #cons(10, #nil()))
map(obj { x . *($x, $x) }, #cons(10, #nil()))
fn range-iter(n, i) { match ==($n, $i) { #T() . #nil() | #F() . #cons($i, range-iter($n, +($i, 1))) } }
range-iter(5, 0)
map(obj { x . *($x, $x) }, range-iter(5, 0))
range-iter(5, 0)
obj { #force () . 123 }
send(obj { #force () . 123 }, #force ())
fn nats(n) { obj { #hd () . $n | #tl () . nats(+($n, 1)) } }
send(send(send(nats(0), #tl ()), #tl ()), #hd ())
nats(0)
obj { #fst () . 23 | #snd () . 512 }
send(obj { #fst () . 23 | #snd () . 512 }, #snd ())
square(5)
range-iter(5, 0)
fn f(x) { $x }
