#V2
nats(0)
send(nats(0), #hd ())
send(nats(0), #tl ())
send(send(nats(0), #tl ()), #hd ())
send(send(send(nats(0), #tl ()), #tl ()), #hd ())
let { foo = 123 . $foo }
==(1, 1)
let { foo = 123 . $foo }
obj { x . $x }
:def fn f(x) { $x }
f(123)
==(2, +(1, 1))
==(3, +(1, 1))
let { x = 6 . match ==(2, +(1, 1)) { #T() . 5| #F() . *(3, $x) } }
let { x = 6 . match ==(2, +(1, 1)) { #T() . $x | #F() . *(3, $x) } }
:def fn fct(x) { match ==($x, 0) { #T() . 1 | #F() . *($x, fct(sub($x, 1))) } }
fct(5)
()
match #foo (3, 4) { #bar () . 123 | #foo (x, y) . $x }
:def fn map(f, xs) { match $xs { #nil() . #nil() | #cons(x, xs) . #cons(send($f, $x), map($f, $xs)) } }
:def fn range-iter(n, i) { match ==($n, $i) { #T() . #nil() | #F() . #cons($i, range-iter($n, +($i, 1))) } }
range-iter(5, 0)
map(obj { x . *($x, $x) }, range-iter(5, 0))
obj { #force () . 123 }
obj { x . $x }
send(obj { x . $x }, 123)
:def fn map(f, xs) { match $xs { #nil() . #nil() | #cons(x, xs) . #cons(send($f, $x), map($f, $xs)) } }
map(obj { x . *($x, $x) }, #cons(10, #nil()))
:def fn range-iter(n, i) { match ==($n, $i) { #T() . #nil() | #F() . #cons($i, range-iter($n, +($i, 1))) } }
range-iter(5, 0)
map(obj { x . *($x, $x) }, range-iter(5, 0))
obj { #fst () . 23 | #snd () . 512 }
send(obj { #fst () . 23 | #snd () . 512 }, #fst ())
send(obj { #fst () . 23 | #snd () . 512 }, #snd ())
let { foo = 123 . $foo }
obj { x . $x }
obj { #force () . 123 }
square(5)
fct(5)
square(5)
range-iter(5)
range-iter(5, 0)
:def fn f(x) { $x }
square(5)
range-iter(5, 0)
map(obj { x . *($x, $x) }, range-iter(5, 0))
square(5)
range-iter(5, 0)
nats(0)
obj { #fst () . 60 | #snd () . 150 }
nats(0)
send(send(send(nats(0), #tl ()), #tl ()), #hd ())
send(obj { #fst () . 60 | #snd () . 150 }, #fst())
send(obj { #fst () . 60 | #snd () . 150 }, #snd())
nats(0)
send(nats(0), #hd())
send(nats(0), #tl())
send(send(nats(0), #tl()), #hd())
nats(0)
square(5)
range-iter(5, 0)
square(5)
range-iter(5, 0)
:def fn f(x) { $x }
f(123)
let { x = 123 . +($x, 1) }
+(20, 30)
+(3, 4)
fn f(x) { $x }
f(213)
pyth(3, 4)
range-iter(5, 0)
fn f(x) { $x }
square(5)
range-iter(5, 0)
123
let { foo = 123 . $foo }
let { foo = 123 . read foo }
