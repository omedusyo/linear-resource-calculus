fn id[a] {
  %a
}

fn inc[x] {
  +[%x, 1]
}

fn dup_bool[b] { match %b {
| #T . [#T, #T]
| #F . [#F, #F]
}}

fn discard_bool[b] { match %b {
| #T . []
| #F . []
}}

fn dup_nat[n] { match %n {
| #zero . [#zero, #zero]
| #succ n . match dup_nat[%n] {
    [n0, n1] . [#succ %n0, #succ %n1]
  }
}}

fn discard_nat[n] { match %n {
| #zero . []
| #succ n . discard_nat[%n]
}}

fn append[xs, ys] { match %xs {
  #nil . %ys
| #cons [x, xs] . #cons [%x, append[%xs, %ys]]
}}

fn reverse-loop[xs, state] { match %xs {
| #nil . %state
| #cons [x, xs] . reverse-loop[%xs, #cons [%x, %state]]
}}

fn nats[n] { obj { n = %n . {
| #hd . %n
| #tl . nats[+[%n, 1]]
}}}

fn example_tuple_0[] {
  obj {. { #fst . 123 | #snd . 512 }}
}

fn example_tuple_1[] {
  obj { n = 123 . { #fst . %n | #snd . +[%n, 100] }}
}

fn map-server[f, xs] { match %xs {
  #nil . match send[%f, #stop] { [] . #nil }
| #cons[x, xs] . match send[%f, #inc %x ] {
    [y, f] . #cons[%y, map-server[%f, %xs]]
  }
}}

fn incrementing-server[] { obj { . {
| #stop . []
| #inc x . [+[%x, 1], incrementing-server[]]
}}}

fn range-iter[n, i] { 
  match dup[%n] { [n-copy, n] .
  match dup[%i] { [i-copy, i] .
  match ==[%n, %i] {
    #T .
      match discard[%n-copy] { [] .
      match discard[%i-copy] { [] .
        #nil
      }}
  | #F . match dup[%i-copy] { [i-copy, i] . #cons[%i-copy, range-iter[%n-copy, +[%i, 1]]] }
  }
}}}

fn range-iter-simpler[n, i] { 
  match ==[clone n, clone i] {
    #T .
      drop n .
      drop i .
      #nil
  | #F . #cons[clone i, range-iter-simpler[%n, +[%i, 1]]]
  }
}

fn fib[x, y] { obj { x = %x, y = %y . {
   #next .
   [clone x,  fib[clone y, +[%x, %y]]]
}}}

fn observe-stream[stream, n] { observe-stream-loop[%stream, 0, %n] }

fn observe-stream-loop[stream, i, n] { match ==[clone i, clone n] {
  #T .
    drop i .
    drop n .
    #cont[%stream]
| #F .
    let { [x, stream] = send[%stream, #next] .
      #cons[%x, observe-stream-loop[%stream, +[%i, 1], %n]]
    }
}}

