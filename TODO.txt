* separate parsers into their own modules (each lambda calc could get a local module named `p` s.t. it would contain the parsers)
* multiline repl (might be hard, since you'd have to somehow have suspendable/resumable parsers, which requires some sort of continuations)
* in cartesian lambda calculus for Vlaue::ClosureObject { captured_env: Env, branches: Rc<Vec<PatternBranch>> },
  do you really need the Rc<_>?

* For linear case, try to figure out if you even need environments.
  Feels like substitution would work just fine in this case...
  Oh wait, for objects that capture stuff you would basically still need something
  like an environment.

* Move primitive operations into its own module.
* When evaluating string literal, we clone it to create the value. Is that reasonable?
  I bet we'll have to have a notion of code as resource that we may not just clone...
* Allow functions of different arities to have the same name.

* Programs to try to write:
  DONE: Stack
  Queue objects, or some other classic ephemeral data-structure/object
  Done. Directed Multigraphs, Undirected Multigraphs
  A cyclic slide-show of images.
  Presheaves: What if we forced for every value in our language to support a special @next message?
    Would this give us a natural semantics for Dynamic Sets (monoid (Nat,+,0)-Actions on sets)
  Maximum Flow
  top-down parsers (basically nothing new, parsing combinators?)
  bottom-up parsers (this will be very interesting!)
  suspendable/resumable parser objects (e.g. for when you get a stream of tokens from user, and you don't get all of the input at once)
  cartesian/linear lambda calc interpreters
  Turing machine simulator, CPU simulator, logic gates, Karel, Turtle Geomtry
  Game of life or various other von Neumann type of things.
  Connection Machine, GPU, FPGA, circuits
  Stream processing
  Discrete Event Dynamic System
  Petri Net
  Actors
  Real numbers
  Continuous Dynamic Systems
  Markov chains, stochastic dynamic systems.
* In the REPL introduce ability to manipulate environment.
* Introduce a TODO expression, that would somehow at runtime prompt the programmer
  to input the code that should execute next. Live programming!
* Concurrency/Parallelism is not just about vaguely/nebulously/independently executing processes.
  You can also have a much more concrete sense of concurrent processes.
  Processes take up space somewhere somehow, and I bet Par is the construct for
  placing two processes in two non-overlapping spatial locations so that ofcourse these processes shall execute independently!
* Dining Philosophers
