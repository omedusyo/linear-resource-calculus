#V2
[+[5, 6], 2]
ul_5[6]
fn mul_5[x] { *[%x, 5] }
mul_5[6]
fn pm[x] { match %x { #foo x . %x } }
match #foo #bar [1,[50, 2]] { #foo #bar [x, [y, z]] . [%y, %x, %z] }
match #a #a1 [3, 4] { #a { #a0 . 123 | #a1 [x, y]. [%y, %x] }   }
pm[#foo 123]
send[obj { @next . 123 }, @next @next]
send[obj { @next @next. 123 }, @next @next]
send[obj { @next @next . 123 }, @next @next]
send[obj { @next @foo . 123 }, @next @foo]
obj { @next . 123 }
obj { @next . 123 | @foo . 3112 }
send[obj { @next . 123 | @foo . 3112 }, @next]
send[obj { @next . 123 | @foo . 3112 }, @foo]
obj { @next { @bar . 123 | @q . 13} }
send[obj { @next { @bar . 123 | @q . 13} }, @next]
send[obj { @next { @bar . 123 | @q . 13} }, @next @bar]
send[obj { @next { @bar . 123 | @q . 13} }, @next @bar @q]
send[obj { @next { @bar . 123 | @q . 13} }, @next @q]
send[obj { @next { @bar . 123 | @q . 13} }, @next @bar]
send[obj { @next { @foo . 123 } }, @next @foo]
send[obj { @next . 123 | @foo . 3112 }, @foo]
obj { . 123 }
obj { @foo[] . 123 }
send[nats[3],  @tl @tl @tl]
nats[3]
send[nats[3], @tl]
send[nats[3], @tl @tl]
send[nats[3], @tl]
send[send[nats[3], @tl], @tl]
send[nats[0], @tl]
send[nats[0], @hd]
send[nats[0], @tl @tl]
send[nats[0], @tl @hd]
obj { @tl . obj { @hd . 123 }}
send[obj { @tl . obj { @hd . 123 }}, @tl]
send[send[obj { @tl . obj { @hd . 123 }}, @tl], @hd]
send[obj { @tl . obj { @hd . 123 }}, @tl @hd]
obj { @foo[] . 123 }
pm[#foo 123]
obj { @next . 123 | @foo . 3112 }
send[obj { @next . 123 | @foo . 3112 }, @foo]
send[obj { @next . 123 | @foo . 3112 }, @next]
obj { @next { @bar . 123 | @q . 13} }
send[obj { @next . 123 | @foo . 3112 }, @foo]
send[obj { @next { @bar . 123 | @q . 13} }, @next @bar]
send[obj { @next { @bar . 123 | @q . 13} }, @next @q]
send[obj { @next { @bar . 123 | @q . 13} }, @next @bar]
send[send[obj { x y. +[%x, %y] }, 123], 512]
send[obj { x y. +[%x, %y] }, 123]
obj { . 123 }
send[nats[0], @tl]
send[send[nats[0], @tl], @tl]
send[nats[0], @tl @tl]
send[fib[0, 1], @next]
let { [x, f] = send[fib[3, 5], @next]  . [%x, send[%f, @next]] }
let { [x, f] = send[fib[3, 5], @next]  . [%x, let { [x, f] = send[%f, @next] . [%x, send[%f, @next]] }] }
cut { x = 123 . %x }
cut { x = 123, y = 512 . [%y, %x] }
let { x = 123 . %x }
let { x = 123, y = 512 . [%y, %x] }
let { x = 123, y = 512 . [cut { a = %x . %a }, cut { b = %y . %b }] }
cut { [x, y] = [20, 30] . [%y, %x] }
cut { [[[x]], [y, z]] = [[[20]], [30, 40]] . [%y, %x, %z] }
match #foo #bar [1,[50, 2]] { #foo #bar [x, [y, z]] . [%y, %x, %z] }
match #a #a1 [3, 4] { #a { #a0 . 123 | #a1 [x, y]. [%y, %x] }   }
pm[#foo 123]
match ==[1,2] { #T . 123 | #F . 512 }
match #T { #T . 123 | #F . 512 }
send[obj { @next { @bar . 123 | @q . 13} }, @next @bar]
send[obj { @next { @bar . 123 | @q . 13} }, @next @q]
match #T { #T . 123 | #F . 512 }
match ==[1,2] { #T . 123 | #F . 512 }
range-iter-simpler[5, 0]
range-iter[5, 0]
observe-stream[fib[0, 1], 0]
observe-stream[fib[0, 1], 11]
match ==[1,2] { #T . 123 | #F . 512 }
match #T { #T . 123 | #F . 512 }
match #succ #zero { #succ n . %n }
match match #succ #zero { #succ n . #succ %n } { #succ n . #succ %n }
match #succ #zero { #succ n . %n }
match #succ [123] { #succ [n] . %n }
match [123] { [n] . %n }
dup[#cons[5, #nil[]]]
send[fib[0, 1], @next]
let { [x, f] = send[fib[3, 5], @next]  . [%x, send[%f, @next]] }
let { [x, f] = send[fib[3, 5], @next]  . [%x, let { [x, f] = send[%f, @next] . [%x, send[%f, @next]] }] }
observe-stream[fib[0, 1], 0]
observe-stream[fib[0, 1], 11]
cut { x = 123 . %x }
cut { x = 123, y = 512 . [%y, %x] }
let {. 123 }
let { x = 123 . %x }
let { x = 123, y = 512 . [%y, %x] }
let { x = 123, y = 512 . [cut { a = %x . %a }, cut { b = %y . %b }] }
cut { [x, y] = [20, 30] . [%y, %x] }
cut { [[[x]], [y, z]] = [[[20]], [30, 40]] . [%y, %x, %z] }
