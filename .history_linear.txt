#V2
match ==[1,2] { #T . 123 | #F . 512 }
range-iter-simpler[5, 0]
range-iter[5, 0]
observe-stream[fib[0, 1], 0]
observe-stream[fib[0, 1], 11]
match ==[1,2] { #T . 123 | #F . 512 }
match #T { #T . 123 | #F . 512 }
match #succ #zero { #succ n . %n }
match match #succ #zero { #succ n . #succ %n } { #succ n . #succ %n }
match #succ #zero { #succ n . %n }
match #succ [123] { #succ [n] . %n }
match [123] { [n] . %n }
dup[#cons[5, #nil[]]]
send[fib[0, 1], @next]
let { [x, f] = send[fib[3, 5], @next]  . [%x, send[%f, @next]] }
let { [x, f] = send[fib[3, 5], @next]  . [%x, let { [x, f] = send[%f, @next] . [%x, send[%f, @next]] }] }
observe-stream[fib[0, 1], 0]
observe-stream[fib[0, 1], 11]
cut { x = 123 . %x }
cut { x = 123, y = 512 . [%y, %x] }
let {. 123 }
let { x = 123 . %x }
let { x = 123, y = 512 . [%y, %x] }
let { x = 123, y = 512 . [cut { a = %x . %a }, cut { b = %y . %b }] }
cut { [x, y] = [20, 30] . [%y, %x] }
cut { [[[x]], [y, z]] = [[[20]], [30, 40]] . [%y, %x, %z] }
example-nested-object[]
send[example-nested-object[], @a0]
send[example-nested-object[], @a0 @a1]
send[example-nested-object[], @a0 @b0]
send[example-nested-object[], @a0 @b1]
example-nested-object[]
send[example-nested-object[], @a0]
send[example-nested-object[], @a0 @b0]
send[example-nested-object[], @a0 @b1]
send[example-nested-object[], @a1 @b0]
send[example-nested-object[], @a1 @c0]
send[example-nested-object[], @a1 @c1]
send[example-nested-object-0[], @a1 @c1]
send[example-nested-object-1[], @a1 @c1]
[+[5, 6], 2]
obj { @next . 123 | @foo . 3112 }
match #a #a1 [3, 4] { #a { #a0 . 123 | #a1 [x, y]. [%y, %x] }   }
cut { x = 123 . drop x . [] }
match ==[1,2] { #T . 123 | #F . 512 }
send[nats[0], @tl @hd]
send[nats[0], @tl @tl @tl @hd]
incrementing-server[]
match match #succ #zero { #succ n . #succ %n } { #succ n . #succ %n }
match #succ #zero { #succ n . %n }
match #succ [123] { #succ [n] . %n }
dup[#cons[5, #nil[]]]
let { [x, f] = send[fib[3, 5], @next]  . [%x, let { [x, f] = send[%f, @next] . [%x, send[%f, @next]] }] }
observe-stream[fib[0, 1], 0]
observe-stream[fib[0, 1], 11]
let { x = 123, y = 512 . [%y, %x] }
let { x = 123, y = 512 . [cut { a = %x . %a }, cut { b = %y . %b }] }
cut { [x, y] = [20, 30] . [%y, %x] }
cut { [[[x]], [y, z]] = [[[20]], [30, 40]] . [%y, %x, %z] }
init-server-0[]
send[init-server-0[], @inc]
send[init-server-0[], @inc @inc]
send[init-server-0[], @inc @inc @dec]
send[init-server-0[], @inc @inc @reset]
send[init-server-0[], @inc @inc @reset @add 5]
incrementing-server[]
fib[5, 0]
fib[0, 1]
obj { x . +[%x, 1] }
let { y = 1 . obj { x . +[%x, %y] } }
let { y = 1 . obj { [x0, x1] . +[%x0, +[%x1, %y]] } }
fib[0, 1]
nats[0]
send[incrementing-server[], @inc 5 ]
let { y = 1 . obj { [x0, x1] . +[%x0, +[%x1, %y]] } }
let { y = 1 . obj { [] . +[%x0, +[%x1, %y]] } }
let { y = 1 . obj { [x0, x1] . +[%x0, +[%x1, %y]] } }
send[init-server-0[], @inc @inc @reset @add 5]
make-vending-machine[]
send[make-vending-machine[], @gimme-candy-bar 10]
send[make-vending-machine[], @replenish #candy]
make-vending-machine[]
send[make-vending-machine[], @replenish #candy]
make-WORLD[]
ake-user[make-WORLD[]]
make-user[make-WORLD[]]
send[make-user[make-WORLD[]], @live-life]
send[make-user[make-WORLD[]], @live-life @life-life]
send[make-user[make-WORLD[]], @live-life @live-life]
send[make-user[make-WORLD[]], @live-life @live-life @live-life]
send[make-user[make-WORLD[]], @live-life @live-life @live-life @live-life]
send[make-user[make-WORLD[]], @live-life @live-life @live-life @live-life @live-life]
send[Wendy[make-WORLD[]], @live-life @live-life @live-life @live-life @live-life]
obj { @a . 123 }
graph-a[]
send[graph-a[], @to-b]
send[graph-a[], @to-b @to-c]
send[graph-a[], @to-b @to-c @to-d]
send[graph-a[], @to-b @to-c @to-d @to-e]
send[graph-a[], @to-b @to-c @to-d @to-e @stuck]
